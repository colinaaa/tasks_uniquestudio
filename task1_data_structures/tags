!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Array	infix2postfix.c	/^		int *Array;$/;"	m	struct:Stack_info	file:
EMPTY	infix2postfix.c	3;"	d	file:
List_Header	list.c	/^typedef Pointer2Node List_Header;$/;"	t	file:
Next	list.c	/^		Position Next;$/;"	m	struct:Node	file:
Node	list.c	/^struct Node$/;"	s	file:
Pointer2Node	list.c	/^typedef struct Node *Pointer2Node;$/;"	t	typeref:struct:Node	file:
Position	list.c	/^typedef Pointer2Node Position;$/;"	t	file:
Stack	infix2postfix.c	/^typedef struct Stack_info *Stack;$/;"	t	typeref:struct:Stack_info	file:
Stack_info	infix2postfix.c	/^struct Stack_info$/;"	s	file:
build_stack	infix2postfix.c	/^Stack build_stack(void)$/;"	f
change_in_triangle	heapsort.c	/^void change_in_triangle(int a[], int summit)\/\/将每个三角中的最大值调整至上面的顶点$/;"	f
delete_element	list.c	/^void delete_element(int x,List_Header L)$/;"	f
delete_list	list.c	/^void delete_list(List_Header L)$/;"	f
divide_array	quicksort.c	/^int divide_array(int a[], int first_index, int last_index)$/;"	f
element	list.c	/^		int element;$/;"	m	struct:Node	file:
find	list.c	/^Position find(int x, List_Header L)$/;"	f
find_previous	list.c	/^Position find_previous(int x, List_Header L)$/;"	f
heapsort	heapsort.c	/^void heapsort(int a[], int n)$/;"	f
initialize_a_list	list.c	/^List_Header initialize_a_list(int n)$/;"	f
insert	list.c	/^void insert (Position P, List_Header L, int x)\/\/insert x *behind* Position P$/;"	f
insertsort	insertsort.c	/^void insertsort(int a[], int n)$/;"	f
isEmpty	infix2postfix.c	/^int isEmpty(Stack S)$/;"	f
isEmpty	list.c	/^int isEmpty(List_Header L)$/;"	f
main	heapsort.c	/^int main(void)$/;"	f
main	insertsort.c	/^int main(void)$/;"	f
main	list.c	/^int main(void)$/;"	f
main	mergesort.c	/^int main(void)$/;"	f
main	quicksort.c	/^int main(void)$/;"	f
merge_2_array	mergesort.c	/^void merge_2_array(int a[], int first_index1,int last_index1, int last_index2)$/;"	f
mergesort	mergesort.c	/^void mergesort(int a[], int first, int last)$/;"	f
pop	infix2postfix.c	/^int pop(Stack S)$/;"	f
print_the_list	list.c	/^void print_the_list(List_Header L)$/;"	f
push	infix2postfix.c	/^void push(Stack S,int x)$/;"	f
quicksort	quicksort.c	/^void quicksort(int a[], int first_index, int last_index)$/;"	f
swap	heapsort.c	/^void swap(int a[], int index1, int index2)$/;"	f
swap	infix2postfix.c	/^void swap(void)$/;"	f
top_index	infix2postfix.c	/^		int top_index;$/;"	m	struct:Stack_info	file:
